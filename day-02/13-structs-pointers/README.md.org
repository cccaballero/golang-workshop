* Structs y punteros
  :PROPERTIES:
  :CUSTOM_ID: structs-y-punteros
  :END:
Un =struct= es un tipo de dato definido por el usuario que representa
una coleccion de campos (es similar al concepto al =struct= en C). Se
usa en lugares donde tiene sentido agrupar diferentes tipos de datos.

#+begin_src go
  type Employee struct {
      firstName string
      lastName string
      age int
  }
#+end_src

En el ejemplo anterior se define un =struct= con el nombre =Employee=
que contiene atributos de un empleado como =first name=, =last name= y
=age= con los respectivos tipos de datos de cada uno.

Los campos individuales de un =struct= se acceden con =.=.

#+begin_src go
  var emp := Employee {
      firstName: "Something"
  }

  fmt.Println(emp.firstName)

  > Something
#+end_src

** Campos struct
   :PROPERTIES:
   :CUSTOM_ID: campos-struct
   :END:
Golang permite que los campos de un =struct= puedan ser de tipo=struct=.

#+begin_src go
  type Address struct {
      city, state string
  }

  type Employee struct {
      firstName, lastName string
      age int
      address Address
  }
#+end_src

Para inicializar un campo =struct= simplemente nos referimos al mismo en
el bloque de inicialización

#+begin_src go
  var emp Employee

  emp := Employee{
      firstName: "Peter",
      lastName:  "Parker",
      age:       22,
      address: Address{
          city:  "New York",
          state: "New York",
      },
  }

  fmt.Println(emp)

  > {Peter  {New York New York}}
#+end_src

Los campos anidados se acceden con multiples niveles de notacion de
punto.

#+begin_src go
  fmt.Println(emp.address.city)

  > AA
#+end_src

** Composición
   :PROPERTIES:
   :CUSTOM_ID: composición
   :END:
Un =struct= puede tambien "heredar" todos los campos de otro usando
composición. Para esto existe una notación especial

#+begin_src go
  type Address struct {
      city, state string
  }

  type Employee struct {
      firstName, lastName string
      age int
      Address
  }
#+end_src

Nótese que aquí no se incluye un campo para =Address=, con lo que
indicamos que nuestro tipo =Employee= está compuesto por =Address=

Al crear una estructura compuesta tenemos que especificar todos los
campos

#+begin_src go
  emp := Employee{
      firstName: "Peter",
      lastName:  "Parker",
      age:       22,
      Address: Address{
          city:  "New York",
          state: "New York",
      },
  }
#+end_src

Para acceder a los campos de la estructura compuesta utilizamos la
notación usual

#+begin_src go
  ```go
  fmt.Println(emp.city)

  > New York
#+end_src

** Visibilidad
   :PROPERTIES:
   :CUSTOM_ID: visibilidad
   :END:
Un =struct= y sus campos son visibles por fuera del paquete que los
contiene dependiendo de la primera letra de su nombre. Si el =struct=
employee es llamado =employee= en vez de =Employee=, no sera visible por
fuera del paquete donde se declaro. Eso se llama un tipo *exportable* .
La misma condicion se aplica a los campos de un =struct=.

** Igualdad
   :PROPERTIES:
   :CUSTOM_ID: igualdad
   :END:
Un =struct= es un tipo por valor. Dos variables =struct= se consideran
iguales si todos los valores de sus campos son iguales. Esto quiere
decir que si un =struct= tiene campos que no se pueden comparar, como un
=map=, la operación (====) va a fallar.

** Methods/Receivers
   :PROPERTIES:
   :CUSTOM_ID: methodsreceivers
   :END:
Los métodos son funciones asociadas a un tipo especifico. Son similares
al concepto de métodos de clase en el mundo OOP. La sintaxis es la
siguiente:

#+begin_src go
  func (t Type) MethodName(parameter list) {
      // codigo del metodo
  }
#+end_src

Usualmente se define el código del método en el mismo archivo que el
tipo que lo contiene.

En el siguiente ejemplo se agrega el método =Print= al tipo =Employee=,
definido en los ejemplo anteriores, para imprimir el contenido del
registro mas claramente:

#+begin_src go
  func (e Employee) Print() {
      fmt.Println("Employee Record:")
      fmt.Println("Name:", e.firstName, e.lastName)
      fmt.Println("Address:", e.address)
  }

  var emp Employee

  emp.Print()

  > Employee Record:
    Name: Allen Varghese
    Address: {AA CO}
#+end_src

** Punteros
   :PROPERTIES:
   :CUSTOM_ID: punteros
   :END:
Golang soporta punteros para actualizar valores pero no admite
aritmetica de punteros como en C. =*= se usa como prefijo para definir
un puntero para de un tipo dado.

El valor por defecto de los punteros en Golang es =nil=, este valor
también se utiliza para indicar que un puntero es nulo.

#+begin_src go
  func (t *Type) MethodName(parameter list) {
      // body
  }
#+end_src

Tener en cuenta que un puntero solo permite recibir punteros de su tipo
y no otros. Los punteros se usan normalmente cuando es muy costoso
copiar datos, y es mas facil modificar los valores de las variables y
estructuras originales. Esta mecanica deja bien explicito cuando se usa
una referencia, o un valor.

#+begin_src go
  func (e *Employee) updateAge(newAge int) {
      e.age = newAge
  }
  emp := Employee{
      age: 33,
  }

  fmt.Println("Before:", emp.age)
  emp.updateAge(34)
  fmt.Println("After:", emp.age)

  > Before: 33
    After: 34
#+end_src

En le ejemplo anterior el campo =age= se modifica en la variable
original. Para indicar este comportamiento notar el =*= antes del tipo
=Employee= en la definicion del metodo =updateAge=.
