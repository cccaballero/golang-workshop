* HTTP Client
  :PROPERTIES:
  :CUSTOM_ID: http-client
  :END:

El paquete [[https://golang.org/pkg/net/http/][http]] contiene una implementacion de un cliente http que
permite emular las acciones que realiza un web browser.

Para este ejercicio se utiliza el tester HTTP https://httpbin.org
([[https://github.com/postmanlabs/httpbin][codigo fuente]], [[https://hub.docker.com/r/kennethreitz/httpbin/][imagen de Docker para uso local]]).

** Ejecutando un GET
   :PROPERTIES:
   :CUSTOM_ID: ejecutando-un-get
   :END:
#+begin_src go
  resp, _ := http.Get("https://httpbin.org/get")
  defer resp.Body.Close()

  data, _ := ioutil.ReadAll(resp.Body)
  fmt.Println(string(data))
#+end_src

** Ejecutando un POST
   :PROPERTIES:
   :CUSTOM_ID: ejecutando-un-post
   :END:

#+begin_src go
  payload := "Hello world!"
  resp, _ := http.Post("https://httpbin.org/post", "text/plain", strings.NewReader(payload))
  defer resp.Body.Close()

  data, _ := ioutil.ReadAll(resp.Body)
  fmt.Println(string(data))
#+end_src

Notar que si obtenemos un error de =http.Get= o =http.Post= debemos
cerrar el body (utilizando =defer=).

** Extrayendo informacion de una respuesta JSON
   :PROPERTIES:
   :CUSTOM_ID: extrayendo-informacion-de-una-respuesta-json
   :END:
Dado este JSON:

#+begin_src go
  {
    "headers": {
      "Accept-Encoding": "gzip",
      "Host": "httpbin.org",
      "User-Agent": "Go-http-client/1.1"
    }
  }
#+end_src

Podemos extraer informacion del campo =User-Agent= de la siguiente
manera:

#+begin_src go
  type response struct {
      Headers struct {
          UserAgent string `json:"User-Agent"`
      } `json:"headers"`
  }

  var resp response
  _ := json.Unmarshal([]byte(jsonData), &resp)

  fmt.Println(resp.Headers.UserAgent)
#+end_src

** HTTP request timeouts
   :PROPERTIES:
   :CUSTOM_ID: http-request-timeouts
   :END:
Podemos especificar un tiempo maximo de espera para que un request que
tarda mucho termine automaticamente.

Crear un nuevo objeto request:

#+begin_src go
  req, _ := http.NewRequest(http.MethodGet, url, nil)
#+end_src

Crear un =context= con timeout:

#+begin_src go
  ctx, cancel := context.WithTimeout(context.Background(), timeout)
  defer cancel()
#+end_src

Ejecutar el request pasando por parametro el =context= con el timeout:

#+begin_src go
  resp, _ := http.DefaultClient.Do(req.WithContext(ctx))
  defer resp.Body.Close()
#+end_src
