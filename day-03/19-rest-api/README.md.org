* Creando APIs REST
  :PROPERTIES:
  :CUSTOM_ID: creando-apis-rest
  :END:
** Servidor HTTP.
   :PROPERTIES:
   :CUSTOM_ID: servidor-http.
   :END:
El paquete =net/http= contiene implementaciones de servidor y cliente
para este protocolo. Crear un programa que responda a peticiones HTTP es
una tarea sencilla.

#+begin_example
  func main() {
      http.HandleFunc("/hello", func(w http.ResponseWWriter, r *http.Request) {
          fmt.Fprintf(w, "Hello world")
      })
      log.Fatal(http.ListenAndServe(":8080", nil))
  }
#+end_example

Las estructuras =Server= y =ServeMux= son las encargadas de operar el
servidor y el ciclo de petición y respuesta. La variable
=DefaultServeMux= es utilizada por el servidor por defecto

** Creando nuestro propio ServeMux
   :PROPERTIES:
   :CUSTOM_ID: creando-nuestro-propio-servemux
   :END:
Usar =DefaultServeMux= tiene sentido para proyectos pequeños, pero lo
usual es que utilicemos nuestra propia instancia de =ServeMux=

#+begin_example
  mux := http.NewServeMux()
  mux.HandleFunc("/hello", func(w http.ResponseWriter, req *http.Request) {
      fmt.Fprintf(w, "Hello world")
  })
  log.Fatal(http.ListenAndServe(":8080", mux))
#+end_example

** APIS REST con ServeMux.
   :PROPERTIES:
   :CUSTOM_ID: apis-rest-con-servemux.
   :END:
