* Formatos de datos: JSON y XML
  :PROPERTIES:
  :CUSTOM_ID: formatos-de-datos-json-y-xml
  :END:

** El paquete =encoding=.
   :PROPERTIES:
   :CUSTOM_ID: encoding
   :END:

El paquete =encoding= define interfaces para convertir datos
desde/hacia bytes o representaciones de texto.

- =ascii85= Formato utilizado por Adobe PDF y Postcript.
- =asn1= 	Estructuras ASN.1 en formato DER.
- =base32= 	Codificación Base32, RFC 4648.
- =base64= 	Codificación Base64, RFC 4648.
- =binary= 	Traducción entre formatos numéricos y codificación a  bytes de los mismos.
- =csv= 	Archivos con valores separados por coma (CSV).
- =gob= 	Transmisión de flujos de datos entre emisor y receptor ()
- =hex= 	Valores hexadecimales.
- =json= 	JSON como se define en la RFC 7159.
- =pem= 	Formato PEM usado actualmente para representar llaves TLS y certificados.
- =xml= 	Parser XML 1.0 con soporte para espacios de nombres.

** Serializando a JSON (Marshal).
   :PROPERTIES:
   :CUSTOM_ID: serializacion
   :END:

=json.Marshal= codifica tipos Golang en JSON

- =bool= como JSON Boolean.
- valores numéricos como JSON Number.
- =string= como JSON String, eliminando etiquetas HTML.
- arreglos y /slices/ como JSON Array.
- =struct= como JSON Object.
- =nil= como =null=
- =chan=, complex y literales de funciones provocan error.

*** Serializando estructuras

Las etiquetas definen como se serializan las estructuras.

#+begin_src go
type Address struct {
	// omitempty hace que los campos vacíos no
	// no se serialice.
	City  string `json:"ciudad,omitempty"`
	State string `json:"estado,omitempty"`
	// Campos marcados con - no se serializan
	Zip   strung `json:"-"`
}

type Employee struct {
	FirstName string `json:"nombre"`
	LastName  string `json:"apellido"`
	Age       int    `json:"edad"`
	// no se serializa porque no es exportado
	id        string
	Address
}
#+end_src

** Deserializando desde JSON (Unmarshal).
   :PROPERTIES:
   :CUSTOM_ID: deserializacion
   :END:
