* Creando APIs REST
  :PROPERTIES:
  :CUSTOM_ID: creando-apis-rest
  :END:

** Servidor HTTP.
   :PROPERTIES:
   :CUSTOM_ID: servidor-http.
   :END:

El paquete =net/http= contiene implementaciones de servidor y cliente
para este protocolo. Crear un programa que responda a peticiones HTTP es
una tarea sencilla.

#+begin_src go
  func main() {
      http.HandleFunc("/hello", func(w http.ResponseWWriter, r *http.Request) {
          fmt.Fprintf(w, "Hello world")
      })
      log.Fatal(http.ListenAndServe(":8080", nil))
  }
#+end_src

Las estructuras =Server= y =ServeMux= son las encargadas de operar el
servidor y el ciclo de petición y respuesta. La variable
=DefaultServeMux= es utilizada por el servidor por defecto

** Creando nuestro propio ServeMux
   :PROPERTIES:
   :CUSTOM_ID: creando-nuestro-propio-servemux
   :END:

Usar =DefaultServeMux= tiene sentido para proyectos pequeños, pero lo
usual es que utilicemos nuestra propia instancia de =ServeMux=

#+begin_src go
  mux := http.NewServeMux()
  mux.HandleFunc("/hello", func(w http.ResponseWriter, req *http.Request) {
      fmt.Fprintf(w, "Hello world")
  })
  log.Fatal(http.ListenAndServe(":8080", mux))
#+end_src

Alternativamente podemos crear nuestra propia instancia de =Server=.

#+begin_src go
	// Create a server listening on port 8000
	s := &http.Server{
		Addr:    ":8000",
		Handler: mux,
	}

	// Continue to process new requests until an error occurs
	log.Fatal(s.ListenAndServe())
#+end_src

** APIS REST con ServeMux.
   :PROPERTIES:
   :CUSTOM_ID: apis-rest-con-servemux.
   :END:

Tanto =Server= como =ServeMux= proveen el nivel mínimo de abstracción
necesario para manejar peticiones HTTP.

Tomemos por ejemplo el código para hacer un API REST sencilla

#+begin_src go
type H = func(w http.ResponseWriter, r *http.Request)

func dispatchResource(get, post, put, delete H) H {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		switch r.Method {
		case "GET":
			get(w, r)
		case "POST":
			post(w, r)
		case "PUT":
			put(w, r)
		case "DELETE":
			delete(w, r)
		default:
			w.WriteHeader(http.StatusNotFound)
			w.Write([]byte(`{"message": "not found"}`))
		}
	}
}

func main() {
	// initialize mux
	getFunc := func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`{"message": "get called"}`))
	}
	postFunc := func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusCreated)
		w.Write([]byte(`{"message": "post called"}`))
	}
	m.HandleFunc("/resource", dispatchResource(getFunc, postFunc, nil, nil))
	// use mux
}
#+end_src

** Referencias
   :PROPERTIES:
   :CUSTOM_ID: referencias
   :END:

- [[https://pkg.go.dev/net/http][Documentación de net/http]]
- [[https://github.com/gorilla/mux][Gorilla Mux]]
- [[https://github.com/gin-gonic/gin][Gin]]
