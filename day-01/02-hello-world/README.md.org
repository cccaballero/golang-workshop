* Hello World
  :PROPERTIES:
  :CUSTOM_ID: hello-world
  :END:
Vamos a programar el tradicional =Hello World=.

** Pasos
   :PROPERTIES:
   :CUSTOM_ID: steps
   :END:

1. Crear un directorio llamado =hello-world=.
2. Crear un archivo de texto llamado =main.go= dentro del directorio
   creado en el paso 1.
3. Agregar el siguiente código al archivo =main.go=

#+begin_src go
  package main

  import "fmt"

  func main() {
      fmt.Println("Hello World")
  }
#+end_src

- Ejecutar el programar con el comando =go run main.go=

** ¿Qué sucede exactamente?
   :PROPERTIES:
   :CUSTOM_ID: deep-dive
   :END:
En esta sección vamos a revisar cada linea del programa =Hello World=.

Linea 1 => =package main=

Los *packages* son la forma de agrupar funcionalidad comun en Golang. El
package default es =main= y usualmente significa que el archivo que lo
contiene es el punto de entrada.

Linea 3 => =import "fmt"=

En esta linea especificamos que el package =fmt= (que se incluye como
parte de Golang), es requerido para ejecutar este programa.

Linea 5 => =func main() {=

Las funciones en Golang se definen con el keyword =func=. En esta linea
estamos definiendo una funcion llamada =main= sin argumentos. El codigo
de la funcion se escribe entre ={ }=.

Para crear un ejecutable en Golang tiene que existir una funcion llamada
=main= dentro de un package tambien llamado =main=. Solo puede haber una
funcion =main=, incluso si tenemos muchos archivos =.go= (solo puede
existir un entrypoint por ejecutable)

Linea 6 => =fmt.Println("Hello World")=

Esta linea imprime =Hello World= en la consola. =Println= es una función
dentro del package =fmt= que recibe como argumento el string
="Hello World"=. El =.= es usado para indicar donde encontrar a la
función (=fmt.Println= quiere decir que =Println= esta definida en el
package =fmt=).

La función =Println= hace dos cosas::

- Imprime la entrada que el usuario especifica en el argumento.
- Agrega una nueva linea después de imprimir la entrada especificada.
